version: "2.1"

services:
  api_gate:
    build:
      context: ./apiGate/
      dockerfile: Dockerfile
    container_name: api_gate
    restart: on-failure
    environment:
      API_GATE_PORT: ${API_GATE_PORT}
      AUTH_HOST: ${AUTH_HOST}
      AUTH_PORT: ${AUTH_PORT}
      TWEET_HOST: ${TWEET_HOST}
      TWEET_PORT: ${TWEET_PORT}
    ports:
      - '8081:8081'

  auth_service:
    build:
      context: ./AuthService/
      dockerfile: Dockerfile
    environment:
      AUTH_PORT: ${AUTH_PORT}
      USER: ${AUTH_DB_USER}
      PASSWORD: ${AUTH_DB_PASS}
      DB: ${AUTH_DB}
      HOST: ${AUTH_DB_HOST}
      PORT: ${AUTH_DB_PORT}
    ports:
      - ${AUTH_PORT}:${AUTH_PORT}
    depends_on:
      - postgres

  postgres:
    image: postgres
    volumes:
      - /home/GolandProjects/posgres/:/posgres/data
    container_name: user_db
    restart: on-failure
    environment:
      POSTGRES_USER: ${AUTH_DB_USER}
      POSTGRES_PASSWORD: ${AUTH_DB_PASS}
      POSTGRES_DB: ${AUTH_DB}
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 20

  tweet_service:
    build:
      context: ./TweetService/
      dockerfile: Dockerfile
    environment:
      TWEET_PORT: ${TWEET_PORT}
      CASS_URI: ${CASS_URI}
    ports:
      - ${TWEET_PORT}:${TWEET_PORT}
    depends_on:
      cassandra:
        condition: service_healthy


  cassandra:
    image: cassandra:4.0
    restart: always
    ports:
      - '9042:9042'
    volumes:
      - /home/GolandProjects/cass/:/cass/data
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -e ' describe cluster'"]
      interval: 10s
      timeout: 10s
      retries: 20
